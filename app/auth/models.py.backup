from sqlalchemy import Boolean, Column, ForeignKey, Integer, String, DateTime
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from app.database import Base
import secrets
import datetime

class User(Base):
    __tablename__ = "users"
    
    id = Column(Integer, primary_key=True, index=True)
    email = Column(String, unique=True, index=True)
    username = Column(String, unique=True, index=True)
    hashed_password = Column(String)
    is_active = Column(Boolean, default=True)
    is_admin = Column(Boolean, default=False)
    tenant_id = Column(Integer, ForeignKey("tenants.id"), nullable=True)
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    
    # Relationship - Use string reference to avoid circular import
    tenant = relationship("Tenant", foreign_keys=[tenant_id])

    # Agent relationship (if user is an agent)
    # agent = relationship("Agent", back_populates="user", uselist=False)


class PasswordReset(Base):
    __tablename__ = "password_resets"
    
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    token = Column(String, unique=True, index=True, nullable=False)
    expires_at = Column(DateTime(timezone=True), nullable=False)
    is_used = Column(Boolean, default=False)
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    
    # Relationship
    user = relationship("User")
    
    @classmethod
    def create_token(cls, user_id, expiration_hours=24):
        """Create a new password reset token"""
        # Generate a secure token
        token = secrets.token_urlsafe(32)
        
        # Calculate expiration time
        expires_at = datetime.datetime.now() + datetime.timedelta(hours=expiration_hours)
        
        # Create new token
        reset = cls(
            user_id=user_id,
            token=token,
            expires_at=expires_at
        )
        
        return reset
    
    def is_valid(self):
        """Check if token is still valid"""
        now = datetime.datetime.now()
        return not self.is_used and now < self.expires_at
    
class TenantCredentials(Base):
    __tablename__ = "tenant_credentials"
    
    tenant_id = Column(Integer, ForeignKey("tenants.id"), primary_key=True)
    hashed_password = Column(String, nullable=True)
    password_updated_at = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now())
    
    # Use the same relationship name as in the Tenant model
    tenant = relationship("Tenant", back_populates="credentials")